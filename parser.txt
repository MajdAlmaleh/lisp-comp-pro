parser grammar LispParser;

options { tokenVocab = LispLexer; }

program     
    : expression* EOF ;             

expression  
    : list
    | SYMBOL
    | INT
    | FLOAT
    | HEX
    | OCTAL
    | BINARY
    | COMPLEX
    | STRING
    | defun_expr
    | lambda_expr
    | if_expr
    | let_expr
    | setq_expr
    | logical_expr
    | cond_expr
    | progn_expr
    | quote_expr
    | TRUE
    | FALSE
    ;

list        
    : LPAREN expression* RPAREN ;    

defun_expr  
    : LPAREN DEFUN SYMBOL param_list expression+ RPAREN ;  

lambda_expr 
    : LPAREN LAMBDA param_list expression+ RPAREN ;         

if_expr     
    : LPAREN IF expression expression expression? RPAREN ;  

let_expr    
    : LPAREN LET LPAREN (LPAREN SYMBOL expression RPAREN)+ RPAREN expression+ RPAREN ;

setq_expr   
    : LPAREN SETQ SYMBOL expression RPAREN ;

logical_expr 
    : LPAREN (AND | OR | NOT) expression+ RPAREN ;

cond_expr   
    : LPAREN COND (LPAREN expression expression+ RPAREN)+ RPAREN ;

progn_expr  
    : LPAREN PROGN expression+ RPAREN ;

quote_expr  
    : LPAREN (QUOTE | BACKQUOTE | UNQUOTE) expression RPAREN ;

param_list  
    : LPAREN SYMBOL* RPAREN ;
